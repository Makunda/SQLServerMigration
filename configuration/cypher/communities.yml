communities:
  get_communities_node:
    query: >
      MATCH (o:Object:`$$APPLICATION$$`)
      WHERE o.`$$PROPERTY$$` IS NOT NULL
      return DISTINCT o.`$$PROPERTY$$` as community, COLLECT(DISTINCT o) as objects
    anchors:
      - APPLICATION
      - PROPERTY
    return:
      - community
      - objects

  get_communities_above:
    query: >
      MATCH (o:Object:`$$APPLICATION$$`)
      WHERE o.`$$PROPERTY$$` IS NOT NULL
      WITH  DISTINCT o.`$$PROPERTY$$` as com_section, COUNT(DISTINCT o) as com_size , COLLECT(o) as nodes
      WHERE com_size >= $communitySize
      UNWIND nodes as o
      return o as object
    params:
      - communitySize
    anchors:
      - APPLICATION
      - PROPERTY
    return:
      - object

  get_communities_below:
    query: >
      MATCH (o:Object:`$$APPLICATION$$`)
      WHERE o.`$$PROPERTY$$` IS NOT NULL
      WITH  DISTINCT o.`$$PROPERTY$$` as com_section, COUNT(DISTINCT o) as com_size , COLLECT(o) as nodes
      WHERE com_size < $communitySize
      UNWIND nodes as o
      return o as object
    params:
      - communitySize
    anchors:
      - APPLICATION
      - PROPERTY
    return:
      - object

  get_incoming_communities:
    query: >
      MATCH (o:Object:`$$APPLICATION$$`)<-[]-(oth:Object)
      WHERE o.`$$PROPERTY$$` = $prop_value
      AND o.`$$PROPERTY$$` <> oth.`$$PROPERTY$$`
      RETURN DISTINCT oth.`$$PROPERTY$$` as community
    params:
      - prop_value
    anchors:
      - APPLICATION
      - PROPERTY
    return:
      - community

  get_outgoing_communities:
    query: >
      MATCH (o:Object:`$$APPLICATION$$`)-[]->(oth:Object)
      WHERE o.`$$PROPERTY$$` = $prop_value
      AND o.`$$PROPERTY$$` <> oth.`$$PROPERTY$$`
      RETURN DISTINCT oth.`$$PROPERTY$$` as community
    params:
      - prop_value
    anchors:
      - APPLICATION
      - PROPERTY
    return:
      - community